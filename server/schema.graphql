type Action {
  type: String
  args: String
  findType: String
  findArgs: String
}

type ActionFindType {
  name: String
  regex: String
  help: String
}

input ActionInput {
  type: String!
  args: String
  findType: String
  findArgs: String
}

type ActionType {
  name: String
  args: Boolean
  regex: String
  help: String
  needTarget: Boolean
}

type AppVersion {
  version: String
  download: String
}

input CreateParameterInput {
  userId: ID!
  key: String!
  value: String
  clientMutationId: String!
}

type CreateParameterPayload {
  parameterEdge: ParameterEdge
  clientMutationId: String!
}

input CreateReportInput {
  userId: ID!
  startTime: String!
  endTime: String!
  platform: String!
  platformVersion: String!
  packageName: String!
  labels: [LabelInput]
  records: [ScriptRecordInput]
  clientMutationId: String!
}

type CreateReportPayload {
  reportEdge: ReportEdge
  clientMutationId: String!
}

input CreateScriptInput {
  userId: ID!
  title: String!
  labels: [ID]
  actions: [ActionInput]
  clientMutationId: String!
}

type CreateScriptPayload {
  scriptEdge: ScriptEdge
  clientMutationId: String!
}

type Label {
  id: ID!
  name: String
  color: String
}

input LabelInput {
  name: String!
  color: String!
}

type Mutation {
  createScript(input: CreateScriptInput!): CreateScriptPayload
  updateScript(input: UpdateScriptInput!): UpdateScriptPayload
  removeScript(input: RemoveScriptInput!): RemoveScriptPayload
  createParameter(input: CreateParameterInput!): CreateParameterPayload
  updateParameter(input: UpdateParameterInput!): UpdateParameterPayload
  removeParameter(input: RemoveParameterInput!): RemoveParameterPayload
  createReport(input: CreateReportInput!): CreateReportPayload
  removeReport(input: RemoveReportInput!): RemoveReportPayload
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Parameter {
  id: ID!
  key: String
  value: String
  date: String
}

type ParameterConnection {
  pageInfo: PageInfo!
  edges: [ParameterEdge]
}

type ParameterEdge {
  node: Parameter
  cursor: String!
}

type Query {
  user(username: String!, password: String!): User
  versions: [AppVersion]
}

input RemoveParameterInput {
  id: ID!
  clientMutationId: String!
}

type RemoveParameterPayload {
  deletedId: String
  clientMutationId: String!
}

input RemoveReportInput {
  id: ID!
  clientMutationId: String!
}

type RemoveReportPayload {
  deletedId: ID
  clientMutationId: String!
}

input RemoveScriptInput {
  id: ID!
  clientMutationId: String!
}

type RemoveScriptPayload {
  deletedId: ID
  clientMutationId: String!
}

type Report {
  id: ID!
  startTime: String
  endTime: String
  platform: String
  platformVersion: String
  packageName: String
  scripts: [ScriptRecord]
  labels: [Label]
}

type ReportConnection {
  pageInfo: PageInfo!
  edges: [ReportEdge]
}

type ReportEdge {
  node: Report
  cursor: String!
}

type Script {
  id: ID!
  title: String
  date: String
  labels: [Label]
  actions: [Action]
}

type ScriptConnection {
  pageInfo: PageInfo!
  edges: [ScriptEdge]
}

type ScriptEdge {
  node: Script
  cursor: String!
}

type ScriptRecord {
  title: String
  labels: [Label]
  actions: [String]
}

input ScriptRecordInput {
  title: String
  labels: [LabelInput]
  actions: [String]
}

input UpdateParameterInput {
  id: ID!
  value: String!
  clientMutationId: String!
}

type UpdateParameterPayload {
  parameter: Parameter
  clientMutationId: String!
}

input UpdateScriptInput {
  id: ID!
  title: String
  labels: [ID]
  actions: [ActionInput]
  clientMutationId: String!
}

type UpdateScriptPayload {
  script: Script
  clientMutationId: String!
}

type User {
  id: ID!
  scripts(search: String, after: String, first: Int, before: String, last: Int): ScriptConnection
  parameters(search: String, after: String, first: Int, before: String, last: Int): ParameterConnection
  reports(search: String, after: String, first: Int, before: String, last: Int): ReportConnection
  labels(search: String): [Label]
  actionTypes: [ActionType]
  findTypes: [ActionFindType]
  script(id: ID!): Script
  parameter(id: ID!): Parameter
  report(id: ID!): Report
}
